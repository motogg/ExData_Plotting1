cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getinverse
if(!is.null(inv)){
message("Getting cached data")
return(inv)
}
else{
matrix <- x$get()
inv <- solve(matrix)
x$setinverse(inv)
inv
}
}
x = makeCacheMatrix(m)
cacheSolve(x)
getinverse <- function() inv
inv = 45
getinverse
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y){
x <<- y
inv <<- NULL
}
get <- function() x
setinverse <- function(inverse) inv <<- inverse
getinverse <- function() {inv}
list(set = set, get = get, setinverse = setinverse,
getinverse = getinverse)
}
cacheSolve(x)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y){
x <<- y
inv <<- NULL
}
get <- function() x
setinverse <- function(inverse) inv <<- inverse
getinverse <- function() {inv}
list(set = set, get = get, setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getinverse
if(!is.null(inv)){
message("Getting cached data")
return(inv)
}
else{
matrix <- x$get()
inv <- solve(matrix)
x$setinverse(inv)
inv
}
}
cacheSolve(x)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y){
x <<- y
inv <<- NULL
}
get <- function() x
setinverse <- function(inverse) inv <<- inverse
getinverse <- function() inv
list(set = set, get = get, setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getinverse
if(! is.null(inv)){
message("Getting cached data")
return(inv)
}
else{
matrix <- x$get()
inv <- solve(matrix)
x$setinverse(inv)
inv
}
}
cacheSolve(x)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y){
x <<- y
inv <<- NULL
}
get <- function() x
setinverse <- function(inverse) inv <<- inverse
getinverse <- function() inv
list(set = set, get = get, setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getinverse()
if(!is.null(inv)){
message("Getting cached data")
return(inv)
}
else{
matrix <- x$get()
inv <- solve(matrix)
x$setinverse(inv)
inv
}
}
cacheSolve(x)
m = matrix(rbinom(16,20,.6),4,4)
x = makeCacheMatrix(m)
cacheSolve(x)
rm(list = ls())
install.packages("xlsx")
install.packages("XML")
fileUrl = "http://www.w3schools.com/xml/simple.xml"
library("XML", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
doc = xmlTreeParse(fileUrl, useInternalNodes = T)
root = xmlRoot(doc)
str(root)
xmlName(root)
names(root)
root
root[[1]]
root[c(5,3)]
root[[c(5,5)]]
root[[c(5,8)]]
root[[c(8)]]
root[[c(4,2)]]
root[[c(4)]]
root[c(4,3)]
root[[5]][[2]]
root[c(5,2)]
root[[c(5,2)]]
xmlSApply(root,xmlValue)
xmlSApply(root,xmlName)
source("http://bioconductor.org/biocLite.R")
source("http://bioconductor.org/biocLite.R")
source("http://bioconductor.org/biocLite.R")
source("http://bioconductor.org/biocLite.R")
library("BiocInstaller", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
biocLite("rhdf5")
detach("package:BiocInstaller", unload=TRUE)
library("rhdf5")
rm(list = ls())
library("rhdf5", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
created = h5createFile("example.h5")
created
Sys.getenv("MYSQL_HOME")
Sys.getenv("MYSQL_HOME")
Sys.getenv("MYSQL_HOME")
install.packages("httr")
library(hr)
library(httr)
myapp = oauth_app("GIT LEEK", key = "61e1f369bc25b97c6aba", secret = "9d35d8c2ef0e1bc19ceb71bf012b92e414871bcc")
sig = sign_oauth1.0(myspp)
sig = sign_oauth1.0(myapp)
oauth_endpoints("github")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
sig = sign_oauth1.0(myapp)
rm(list = ls())
myapp = oauth_app("GIT LEEK", key = "61e1f369bc25b97c6aba", secret = "9d35d8c2ef0e1bc19ceb71bf012b92e414871bcc")
sig = sign_oauth1.0(myapp)
oauth_endpoints("github")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
library("jsonlite", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
json1 = content(req)
json = fromJSON(toJSON(json1))
json
rm(list = ls())
myapp = oauth_app("GIT LEEK", key = "61e1f369bc25b97c6aba", secret = "9d35d8c2ef0e1bc19ceb71bf012b92e414871bcc")
library("httr", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library("jsonlite", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
myapp = oauth_app("GIT LEEK", key = "61e1f369bc25b97c6aba", secret = "9d35d8c2ef0e1bc19ceb71bf012b92e414871bcc")
oauth_endpoints("github")
gtoken <- config(token = github_token)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
j = stop_for_status(req)
github_token
req <- GET("https://api.github.com/rate_limit", gtoken)
req
myapp = oauth_app("GIT LEEK", key = "61e1f369bc25b97c6aba", secret = "d09adb04e2cd98e7aca1882d2936d7f64ce884bf")
oauth_endpoints("github")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
install.packages("httpuv")
ls()
x = list(gtoken, mapp, rep, github_token)
x = list(gtoken, myapp, rep, github_token)
rm(x)
x = list(gtoken, myapp, rep, github_token)
rm(list = x)
x
ls()
x = list("github_token", "myapp", "req")
rm(list = z)
rm(list = x)
x
ls()
x = c("github_token", "myapp", "req")
x
rm(list = x)
rm(list = ls())
library("data.table", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
?data.table
example("data.table")
example(plyr)
?plyr
example(dplyr)
?dplyr
summary(DT)
DT
DT[,v]
DT[v]
DT[b]
DT[m]
DT[v]
DT[y]
DT[,y]
DT[2:3,y]
library("httr", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
install.packages("httpuv")
library("httpuv", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
oauth_endpoints("github")
myapp = oauth_app("GIT LEEK", key = "61e1f369bc25b97c6aba", secret = "d09adb04e2cd98e7aca1882d2936d7f64ce884bf
Revoke all user tokens")
myapp
myapp = oauth_app("GIT LEEK", key = "61e1f369bc25b97c6aba", secret = "d09adb04e2cd98e7aca1882d2936d7f64ce884bf")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
tolower("gbolahan")
tolower("GBOLAHAN")
toupper("GBOLAHAN")
toupper("Gbolahan")
?nchar
library("stringr", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
options(defaultPackages = c(getOption("defaultPackages"), "data.table","plyr", "dplyr"))
?Rprofile
.Rprofile
R.home()
help(startup)
??Startup
load("~/.RData")
?Rdata
??Rdata
??.Rdata
rm(list = ls)
rm(list = ls())
library("data.table", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library("plyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library("dplyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
options(defaultPackages = c(getOption("defaultPackages"),"data.table","dplyr","plyr"))
options(defaultPackages = c(getOption("defaultPackages"),"data.table","dplyr","plyr"))
?Startup
R.home(component = "home")
R.home()
c(Sys.getenv("R_PROFILE_USER"), file.path(getwd(),".Rprofile"))
?autoload
library("BH", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
detach("package:BH", unload=TRUE)
library("dplyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
detach("package:dplyr", unload=TRUE)
library("proto", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library("gsubfn", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
detach("package:gsubfn", unload=TRUE)
detach("package:proto", unload=TRUE)
library(lattice)
xyplot(Ozone ~ Wind, data = data$"airquality")
xyplot(Ozone ~ Wind, data = data("airquality"))
xyplot(Ozone ~ Wind, data = as.data.frame(data("airquality")))
xyplot(Ozone ~ Wind, data = airquality)
airquality = transform(airquality,Month = factor(Month))
xyplot(Ozone ~ Wind | Month, data = airquality)
xyplot(Ozone ~ Wind | Month, data = airquality, layout = c(5,1))
gl(2,5,rep =10)
gl(2,4,10)
gl(c(1,3,5), 10)
?gl
gl(3,5, labels = c("lst","2nd","3rd"), ordered = T)
rm(airquality)
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
str(mpg)
mpg = mpg
mpg = transform(mpg, model = factor(model), manufacturer = factor(manufacturer))
str(mpg)
mpg = transform(mpg, trans = factor(trans), drv = factor(drv), fl = factor(fl), class = factor(class))
str(mpg)
qplot(displ, hwy, data = mpg)
qplot(displ, hwy, data = mpg, color = drv)
qplot(displ, hwy, data = mpg, color = drv, geom = c("point",'smooth'))
qplot(displ, hwy, data = mpg,  geom = c("point",'smooth'))
qplot( hwy, data = mpg,  geom = c("point",'smooth'))
qplot( hwy, data = mpg, )
qplot( hwy, data = mpg, binwidth = 15)
qplot( hwy, data = mpg, binwidth = 45)
qplot( hwy, data = mpg, bins = 15)
qplot( hwy, data = mpg, bins = 30)
qplot( hwy, data = mpg, bins = 30, fill = drv)
qplot(displ, hwy, data = mpg, facets = .~ drv)
qplot(displ, hwy, data = mpg, facets = drv ~.)
qplot(displ, hwy, data = mpg, facets = .~ drv)
qplot(displ, hwy, data = mpg, facets = .~ drv, geom_smooth(method = "lm"))
qplot(displ, hwy, data = mpg, facets = .~ drv) + geom("smooth")
qplot(displ, hwy, data = mpg, facets = .~ drv) + geom_smooth()
qplot(displ, hwy, data = mpg, facets = .~ drv) + geom_smooth(method = "lm")
qplot(displ, hwy, data = mpg, facets = .~ drv, geom = c("points","smooth"))
qplot(displ, hwy, data = mpg, facets = .~ drv, geom = c("point","smooth"))
geom_point(diply)
expression("gp")
expression("gp *5")
library(nlme)
xyplot(weight, Time | Diet, BodyWeight)
xyplot(Weight, Time | Diet, BodyWeight)
xyplot(weight ~ Time | Diet, BodyWeight)
rm(list = ls())
setwd("~/Documents/MOOC materials/Data Science Specialization/Exploratory Data Analysis/Week 1")
df_consumption = read.table("household_power_consumption.txt", header = T, sep = ";", stringsAsFactors = F)
df_consumption$Date = paste(df_consumption$Date,df_consumption$Time)
df_consumption$Time = NULL
x = df_consumption[grep("0[12]/02/2007",df_consumption$Date),]
df_consumption$Date[1:4]
x = df_consumption[grep("02/02/2007",df_consumption$Date),]
x = df_consumption[grep("2007",df_consumption$Date),]
x = df_consumption[grep("02/2007",df_consumption$Date),]
x = df_consumption[grep("02.2007",df_consumption$Date),]
x = df_consumption[grep("02",df_consumption$Date),]
x = df_consumption[grep("02/02",df_consumption$Date),]
x = df_consumption[grep("02.02",df_consumption$Date),]
x = df_consumption[grep("02.02.07",df_consumption$Date),]
x = df_consumption[grep("02.02.2007",df_consumption$Date),]
x = df_consumption[grep("2007",df_consumption$Date),]
summary(x)
x$Date[1:100]
x = df_consumption[grep("[12].2.2007",df_consumption$Date),]
x = df_consumption[grep("[12]/2/2007",df_consumption$Date),]
x = df_consumption[grep("2/2/2007",df_consumption$Date),]
x$Date
x = df_consumption[grep("^([12])/2/2007",df_consumption$Date),]
rm(list = ls())
df = read.table("household_power_consumption.txt", header = T, sep = ";", stringsAsFactors = F)
df = df[grep("^([12])/2/2007"),]
df = df[grep("^([12])/2/2007",df$Date),]
df$Date = strptime(df$Date, "%d/%m/%Y %H:%M:%S")
df$Global_active_power = as.numeric(df$Global_active_power)
plot(df$Global_active_power, df$Date)
df$Global_active_power[1:4]
plot(df$Global_active_power, col = "red")
barplot(df$Global_active_power, col = "red")
hist(df$Global_active_power, col = "red")
hist(df$Global_active_power, col = "red", xlab = "Global Active Power (Kilowatts)",
main = "Global Active Power")
png("plot1.png")
hist(df$Global_active_power, col = "red", xlab = "Global Active Power (Kilowatts)",
main = "Global Active Power")
dev.off()
setwd("~/GIT/ExData_Plotting1")
png(filename = "plot1.png")
hist(df$Global_active_power, col = "red", xlab = "Global Active Power (Kilowatts)",
main = "Global Active Power")
dev.off()
plot(df$Date, df$Global_active_power, type = "l", ylab = "Global Active Power (Kilowatts)")
df = read.table("household_power_consumption.txt", header = T, sep = ";", stringsAsFactors = F)
setwd("~/Documents/MOOC materials/Data Science Specialization/Exploratory Data Analysis/Week 1")
df = read.table("household_power_consumption.txt", header = T, sep = ";", stringsAsFactors = F)
df = df[grep("^([12])/2/2007",df$Date),]
df$Global_active_power = as.numeric(df$Global_active_power)
df$Date = strptime(df$Date, "%d/%m/%Y")
plot(df$Date, df$Global_active_power, type = "l", ylab = "Global Active Power (Kilowatts)")
df$Date[1:10]
df = read.table("household_power_consumption.txt", header = T, sep = ";", stringsAsFactors = F)
df = df[grep("^([12])/2/2007",df$Date),]
df$Date = paste(df$Date, df$Time)
df$Date = strptime(df$Date, "%d/%m/%Y %H:%M:%S")
df$Global_active_power = as.numeric(df$Global_active_power)
plot(df$Date, df$Global_active_power, type = "l", ylab = "Global Active Power (Kilowatts)")
plot(df$Date, df$Global_active_power, type = "l", ylab = "Global Active Power (Kilowatts)", xlab = "")
setwd("~/GIT/ExData_Plotting1")
png(filename = "plot2.png")
plot(df$Date, df$Global_active_power, type = "l", ylab = "Global Active Power (Kilowatts)", xlab = "")
dev.off()
names(df)
exmple(points)
example(points)
rm(list = ls([!(ls()%in% "df")]))
rm(list = ls()[!(ls()%in% "df")]
)
plot(df$Date,df$Sub_metering_1)
plot(df$Date,df$Sub_metering_1, type= "l")
plot(df$Date,df$Sub_metering_2, type= "l")
plot(df$Date,df$Sub_metering_3, type= "l")
with(df, {})
with(df, {plot(Date,Sub_metering_1, type = "l", col = "black"))
with(df, {plot(Date,Sub_metering_1, type = "l", col = "black")
plot(Date, Sub_metering_2, type = "l", col = "red")
plot(Date, Sub_metering_3, type = "l", col = "blue")})
?lines
with(df, {plot(Date, Sub_metering_1, ylab = "Energy Submetering", type = "n")
lines(Date, Sub_metering_1, type = "l", col = "black")
lines(Date, Sub_metering_2, type = "l", col = "red")
lines(Date, Sub_metering_3, type = "l", col = "blue")})
with(df, {plot(Date, Sub_metering_1, ylab = "Energy Submetering", type = "n")
lines(Date, Sub_metering_1, type = "l", col = "black")
lines(Date, Sub_metering_2, type = "l", col = "red")
lines(Date, Sub_metering_3, type = "l", col = "blue")
legend("topright", type = "l", col = c("black","red","blue"),
legend = c("Sub_metering_1","Sub_metering_2", "Sub_metering_3"))})
with(df, {plot(Date, Sub_metering_1, ylab = "Energy Submetering", type = "n")
lines(Date, Sub_metering_1, type = "l", col = "black")
lines(Date, Sub_metering_2, type = "l", col = "red")
lines(Date, Sub_metering_3, type = "l", col = "blue")
legend("topright", col = c("black","red","blue"),
legend = c("Sub_metering_1","Sub_metering_2", "Sub_metering_3"))})
?legend
with(df, {plot(Date, Sub_metering_1, ylab = "Energy Submetering", type = "n")
lines(Date, Sub_metering_1, type = "l", col = "black")
lines(Date, Sub_metering_2, type = "l", col = "red")
lines(Date, Sub_metering_3, type = "l", col = "blue")
legend("topright", lty = 1 , lwd = 2 ,col = c("black","red","blue"),
legend = c("Sub_metering_1","Sub_metering_2", "Sub_metering_3"))})
png(filename = "plot3.png")
with(df, {plot(Date, Sub_metering_1, ylab = "Energy Submetering", type = "n")
lines(Date, Sub_metering_1, type = "l", col = "black")
lines(Date, Sub_metering_2, type = "l", col = "red")
lines(Date, Sub_metering_3, type = "l", col = "blue")
legend("topright", lty = 1 , lwd = 2 ,col = c("black","red","blue"),
legend = c("Sub_metering_1","Sub_metering_2", "Sub_metering_3"))})
dev.off()
names(Df)
names(df)
with(df, {plot(Date, Global_active_power, ylab = "Global Active Power", xlab = "", type = "l")
plot(Date, Voltage, ylab = "Volatage", xlab = "datetime", type = "l")
plot(Date, Sub_metering_1, ylab = "Energy Submetering", xlab = "", type = "l")
lines(Date, Sub_metering_1, type = "l", col = "black")
lines(Date, Sub_metering_2, type = "l", col = "red")
lines(Date, Sub_metering_3, type = "l", col = "blue")
legend("topright", lty = 1, lwd = 2, col = c("black", "red", "blue"),
legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
plot(Date, Global_reactive_power, ylab = "Global_reactive_power", xlab = "datetime", type = "l")
})
par(mfrow = c(2,2))
with(df, {plot(Date, Global_active_power, ylab = "Global Active Power", xlab = "", type = "l")
plot(Date, Voltage, ylab = "Volatage", xlab = "datetime", type = "l")
plot(Date, Sub_metering_1, ylab = "Energy Submetering", xlab = "", type = "l")
lines(Date, Sub_metering_1, type = "l", col = "black")
lines(Date, Sub_metering_2, type = "l", col = "red")
lines(Date, Sub_metering_3, type = "l", col = "blue")
legend("topright", lty = 1, lwd = 2, col = c("black", "red", "blue"),
legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
plot(Date, Global_reactive_power, ylab = "Global_reactive_power", xlab = "datetime", type = "l")
})
with(df, {plot(Date, Sub_metering_1, ylab = "Energy Submetering", type = "n")
lines(Date, Sub_metering_1, type = "l", col = "black")
lines(Date, Sub_metering_2, type = "l", col = "red")
lines(Date, Sub_metering_3, type = "l", col = "blue")
legend("topright", lty = 1 , lwd = 2 ,col = c("black","red","blue"),
legend = c("Sub_metering_1","Sub_metering_2", "Sub_metering_3"))})
par(mfrow = c(1,1))
with(df, {plot(Date, Sub_metering_1, ylab = "Energy Submetering", type = "n")
lines(Date, Sub_metering_1, type = "l", col = "black")
lines(Date, Sub_metering_2, type = "l", col = "red")
lines(Date, Sub_metering_3, type = "l", col = "blue")
legend("topright", lty = 1 , lwd = 2 ,col = c("black","red","blue"),
legend = c("Sub_metering_1","Sub_metering_2", "Sub_metering_3"))})
par(mfrow = c(2,2), mar = c(4,4,2,1))
with(df, {plot(Date, Global_active_power, ylab = "Global Active Power", xlab = "", type = "l")
plot(Date, Voltage, ylab = "Volatage", xlab = "datetime", type = "l")
plot(Date, Sub_metering_1, ylab = "Energy Submetering", xlab = "", type = "l")
lines(Date, Sub_metering_1, type = "l", col = "black")
lines(Date, Sub_metering_2, type = "l", col = "red")
lines(Date, Sub_metering_3, type = "l", col = "blue")
legend("topright", lty = 1, lwd = 2, col = c("black", "red", "blue"),
legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
plot(Date, Global_reactive_power, ylab = "Global_reactive_power", xlab = "datetime", type = "l")
})
png(filename = "plot4.png")
par(mfrow = c(2,2), mar = c(4,4,2,1))
with(df, {plot(Date, Global_active_power, ylab = "Global Active Power", xlab = "", type = "l")
plot(Date, Voltage, ylab = "Volatage", xlab = "datetime", type = "l")
plot(Date, Sub_metering_1, ylab = "Energy Submetering", xlab = "", type = "l")
lines(Date, Sub_metering_1, type = "l", col = "black")
lines(Date, Sub_metering_2, type = "l", col = "red")
lines(Date, Sub_metering_3, type = "l", col = "blue")
legend("topright", lty = 1, lwd = 2, col = c("black", "red", "blue"),
legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
plot(Date, Global_reactive_power, ylab = "Global_reactive_power", xlab = "datetime", type = "l")
})
dev.off()
